[General]

**.displayGateSchedules = true
**.gateFilter = "**.ethg[1].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"


[OneMasterClock]
sim-time-limit = 1s
network = TimeSyncNetwork

**.timeTransmitter*.clock.oscillator.typename = "RandomDriftOscillator"
**.oscillator.changeInterval = 12.5ms
**.oscillator.changeIntervalChange = uniform(-100ppm,100ppm)
**.oscillator.changeIntervalChangeUpperLimit = 100ppm
**.oscillator.changeIntervalChangeLowerLimit = -100ppm

**.hasTimeSynchronization = true

**.eth[*].bitrate = 100Mbps

**.referenceClock = "timeTransmitter.clock"

*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer[*].displayInfos = true

*.timeTransmitter.gptp.masterPorts = ["eth0"]

*.FiveG.dstt[*].gptp.masterPorts = ["eth0"]
*.FiveG.dstt[*].gptp.slavePort = "tt0"
*.FiveG.nwtt.gptp.masterPorts = ["tt0","tt1"]
*.FiveG.nwtt.gptp.slavePort = "eth0"

tsnDevice*.gptp.slavePort = "eth0"

*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"

*.visualizer.numInfoVisualizers = 3
*.visualizer.infoVisualizer[0].modules = "*.tsnClock.clock"
*.visualizer.infoVisualizer[1].modules = "*.tsnSwitch.clock"
*.visualizer.infoVisualizer[2].modules = "*.tsnDevice*.clock"
*.visualizer.infoVisualizer[1].placementHint = "topLeft"
*.visualizer.infoVisualizer[2].placementHint = "bottom"
*.timeTransmitter.clock.displayStringTextFormat = "time: %T"
*.tsnDevice*.clock.displayStringTextFormat = "diff: %d"
*.MasterClock.clock.displayStringTextFormat = "diff: %d"

[edge]
network = EdgeCloudNetwork
sim-time-limit = 60s


# client applications
*.talker.numApps = 1
*.talker.app[0].typename = "UdpSourceApp"
*.talker.app[0].io.destAddress = "cloudServer"
*.talker.app[0].io.destPort = 1001
*.talker.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.talker.app[0].source.productionInterval = 10ms

# server applications
*.cloudServer.numApps = 1
*.cloudServer.app[0].typename = "UdpEdgeCloudApp"
*.cloudServer.app[0].destAddress = "receiver"
*.cloudServer.app[0].destPort = 1002
*.cloudServer.app[0].localPort = 1001


*.receiver.numApps = 1
*.receiver.app[0].typename = "UdpSinkApp"
*.receiver.app[0].io.localPort = 1002

# enable outgoing streams
*.talker.hasOutgoingStreams = true
*.cloudServer.hasOutgoingStreams = true

# client stream identification
*.talker.bridging.streamIdentifier.identifier.mapping = [{stream: "BE", packetFilter: expr(udp.destPort == 1000)},
                                                         {stream: "VI", packetFilter: expr(udp.destPort == 1001)}]
*.cloudServer.bridging.streamIdentifier.identifier.mapping = [{stream: "BE", packetFilter: expr(udp.destPort == 1000)},
                                                         {stream: "VI", packetFilter: expr(udp.destPort == 1002)}]


[edgeFiveG]
extends = edge
*.histogramContainer.histograms = {Uplink: "data/s1-UL_wall.xml"}
*.FiveG.delayConfig = xmldoc("config/det/delayEdge.xml") 

[edgeFifo]
extends = edge
*.histogramContainer.histograms = {Uplink: "data/s1-UL_wall.xml", Cloud: "data/p2fifo.xml"}
*.cloudServer.app[0].delay = rngProvider("histogramContainer","Cloud")

[edgeDeadline]
extends = edge

[edgeFifoFiveG]
extends = edgeFifo, edgeFiveG

[edgeDeadlineFiveG]
extends = edgeDeadline, edgeFiveG


[coopOnlyAgv2Cell]
network = CooperativeManufacturing

*.agv*.numApps = 1

*.agv*.app[0].typename = "UdpSourceApp"
*.agv1.app[0].io.display-name = "swarmStatus1"
*.agv2.app[0].io.display-name = "swarmStatus2"
*.agv*.app[0].io.destAddress = "processingCell.swarmStatus"
*.agv1.app[0].io.destPort = 1000
*.agv2.app[0].io.destPort = 1001
*.agv*.app[0].source.packetLength = 1000B - 58B
*.agv*.app[0].source.productionInterval = 1ms

*.processingCell.swarmStatus.numApps = 2
*.processingCell.swarmStatus.app[*].typename = "UdpSinkApp"
*.processingCell.swarmStatus.app[0].io.localPort = 1000
*.processingCell.swarmStatus.app[1].io.localPort = 1001

**.hasOutgoingStreams = true
**.streamIdentifier.identifier.mapping = [{stream: "swarmStatus1", packetFilter: expr(udp.destPort == 1000)},
										  {stream: "swarmStatus2", packetFilter: expr(udp.destPort == 1001)}]
**.streamCoder.*.mapping = [{stream:"swarmStatus1",pcp: 7},
							{stream:"swarmStatus2",pcp: 7}]

[GCL]

*.FiveG.nwtt.eth[*].macLayer.queue.trasmissionGate[0].initiallyOpen = false
*.FiveG.nwtt.eth[*].macLayer.queue.trasmissionGate[0].offset = 0s
*.FiveG.nwtt.eth[*].macLayer.queue.trasmissionGate[0].durations = []

*.FiveG.nwtt.eth[*].macLayer.queue.trasmissionGate[1].initiallyOpen = true
*.FiveG.nwtt.eth[*].macLayer.queue.trasmissionGate[1].offset = 819.95s
*.FiveG.nwtt.eth[*].macLayer.queue.trasmissionGate[1].durations = [161us,839us]

[ConstantGcl]
extends = coopOnlyAgv2Cell, GCL

*.FiveG.dstt[*].delayUplink = 100us


