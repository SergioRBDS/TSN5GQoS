[General]
network = TimeSyncUEUE
num-rngs = 1 
sim-time-limit = 50s
**.TSNAppsTableFile = xmldoc("config/app.xml")
*.histogramContainer.histograms = {s1: "../../../deterministic6g_data/PD-Wireless-5G-1/s1-UL_wall.xml",
									s24: "../../../deterministic6g_data/PD-Wireless-5G-1/s24-UL_wall.xml",
									s3: "../../../deterministic6g_data/PD-Wireless-5G-1/s3-UL_wall.xml",
									s4: "../../../deterministic6g_data/PD-Wireless-5G-1/s4-UL_wall.xml",
									s6: "../../../deterministic6g_data/PD-Wireless-5G-1/s6-UL_wall.xml",
									s7: "../../../deterministic6g_data/PD-Wireless-5G-1/s7-UL_wall.xml",
									s8: "../../../deterministic6g_data/PD-Wireless-5G-1/s8-UL_wall.xml",
									s9: "../../../deterministic6g_data/PD-Wireless-5G-1/s9-UL_wall.xml",
									s10: "../../../deterministic6g_data/PD-Wireless-5G-1/s10-DL_wall.xml",
									s19: "../../../deterministic6g_data/PD-Wireless-5G-1/19M_cut.xml",
									s20: "../../../deterministic6g_data/PD-Wireless-5G-1/s20-UL_wall.xml",
									s25: "../../../deterministic6g_data/PD-Wireless-5G-1/25M_cut.xml",
									s26: "../../../deterministic6g_data/PD-Wireless-5G-1/s26-UL_wall.xml",
									gPTP: "../../../deterministic6g_data/PD-Wireless-5G-1/gPTP_cut.xml"}
*.FGS.d*.delayUplink = rngProvider("histogramContainer","s1")
*.FGS.n*.delayDownlink = rngProvider("histogramContainer","s10")
*.FGS.d*.delayD2D = rngProvider("histogramContainer","s1")



#
#	Visualizer
#

*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer[*].displayInfos = true


[DL]
#
#	Time Synchronization
#
*.**.hasTimeSynchronization = true


*.SwitchDN.gptp.gptpNodeType = "MASTER_NODE"
*.SwitchDN.gptp.masterPorts = ["eth0","eth1"]
*.SwitchDN.gptp.slavePort = ""

*.SwitchS*.gptp.slavePort = "eth0"
*.SwitchS1.gptp.masterPorts = ["eth1","eth2","eth3","eth4"]
*.SwitchS2.gptp.masterPorts = ["eth1","eth2"]
*.SwitchS3.gptp.masterPorts = ["eth1","eth2"]

#*.SwitchS2.gptp.slavePort = "eth0"
#*.SwitchS2.gptp.masterPorts = []


# Bridge 5G
*.FGS.nwtt[*].gptp.domain[*].slavePort = "eth0"
*.FGS.nwtt[*].gptp.domain[*].masterPorts = ["tt0","tt1","tt2"]
*.FGS.dstt[*].gptp.domain[*].slavePort = "tt0"
*.FGS.dstt[*].gptp.domain[*].masterPorts = ["eth0"]

**.referenceClock = "SwitchDN.clock"

# data link visualizer displays gPTP time synchronization packets
*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"

*.visualizer.numInfoVisualizers = 1
*.visualizer.infoVisualizer[0].modules = "*.*.clock"
*.SwitchDN.clock.displayStringTextFormat = "time: %T"
*.*.clock.displayStringTextFormat = "diff: %d"

[DL2]
extends = DL

#*.FGS.**.clock.typename = "IdealClock"
**.clock.oscillator.typename = "ConstantDriftOscillator"

#*.TsnSwitchDataNetwork.clock.oscillator.driftRate = 0ppm
*.FGS.**.clock.oscillator.driftRate = -10ppm
*.SwitchDN.clock.oscillator.driftRate = 0ppm
**.oscillator.driftRate = uniform(10ppm,100ppm)

[DL3]
extends = DL

*.FGS.**.clock.typename = "IdealClock"
*.SwitchDN.clock.oscillator.typename = "RandomDriftOscillator"
**.clock.oscillator.typename = "ConstantDriftOscillator"

*.SwitchDN.clock.oscillator.driftRate = -100ppm
*.SwitchDN.clock.oscillator.changeInterval = 12.5ms
*.SwitchDN.clock.oscillator.driftRateChange = uniform(-10ppm, 10ppm)
*.*.clock.oscillator.driftRate = 00ppm

[DLTeste]
#
#	Time Synchronization
#
*.**.hasTimeSynchronization = true
*.FGS.**.clock.typename = "IdealClock"

*.SwitchDN.gptp.gptpNodeType = "MASTER_NODE"
*.SwitchDN.gptp.masterPorts = ["eth0","eth1"]
*.SwitchDN.gptp.slavePort = ""

*.SwitchS*.gptp.slavePort = "eth0"
*.SwitchS1.gptp.masterPorts = ["eth1","eth2","eth3","eth4","eth5","eth6","eth7","eth8"]

#*.SwitchS2.gptp.slavePort = "eth0"
#*.SwitchS2.gptp.masterPorts = []


# Bridge 5G
*.FGS.nwtt[*].gptp.domain[*].slavePort = "eth0"
*.FGS.nwtt[*].gptp.domain[*].masterPorts = ["tt0"]
*.FGS.dstt[*].gptp.domain[*].slavePort = "tt0"
*.FGS.dstt[*].gptp.domain[*].masterPorts = ["eth0"]

**.referenceClock = "SwitchDN.clock"

# data link visualizer displays gPTP time synchronization packets
*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"

*.visualizer.numInfoVisualizers = 1
*.visualizer.infoVisualizer[0].modules = "*.*.clock"
*.SwitchDN.clock.displayStringTextFormat = "time: %T"
*.*.clock.displayStringTextFormat = "diff: %d"

**.clock.oscillator.typename = "ConstantDriftOscillator"

#*.TsnSwitchDataNetwork.clock.oscillator.driftRate = 0ppm

*.SwitchDN.clock.oscillator.driftRate = 10ppm
**.oscillator.driftRate = uniform(10ppm,100ppm)



[Apps0]
*.Sensor*.numApps = 1
*.Sensor*.hasOutgoingStreams = true
*.Sensor*.app[0].typename = "UdpSourceApp"
*.SensorS1.app[0].display-name = "NovaPeca"
*.SensorS3.app[0].display-name = "PecasNaCaixa"
*.Sensor*.app[0].io.destAddress = "PLC"
*.SensorS1.app[0].io.destPort = 1011
*.SensorS3.app[0].io.destPort = 1031
*.SensorS*.app[0].source.packetLength = 64B
*.SensorS*.app[0].source.productionInterval = 20ms
*.SensorS*.app[0].source.initialProductionOffset = 2s

*.CameraS1.numApps = 1
*.CameraS1.hasOutgoingStreams = true
*.CameraS1.app[0].io.destAddress = "PLC"
*.CameraS1.app[0].typename = "UdpSourceApp"
*.CameraS1.app[0].display-name = "StatusPeca"
*.CameraS1.app[0].io.destPort = 1012
*.CameraS1.app[0].source.packetLength = 1500B - 54B
*.CameraS1.app[0].source.productionInterval = 15ms
*.CameraS1.app[0].source.initialProductionOffset = 2.0s

*.RoboS*.numApps = 2
*.RoboS*.hasOutgoingStreams = true
*.RoboS*.hasIncomingStreams = true
*.RoboS*.app[0].io.destAddress = "PLC"
*.RoboS*.app[0].typename = "UdpSourceApp"
*.RoboS1.app[0].display-name = "S2OuDesc"
*.RoboS2.app[0].display-name = "S3"
*.RoboS1.app[0].io.destPort = 1014
*.RoboS2.app[0].io.destPort = 1022
*.RoboS*.app[0].source.packetLength = 128B
*.RoboS*.app[0].source.productionInterval = 5ms
*.RoboS*.app[1].typename = "UdpSinkApp"
*.RoboS*.app[1].display-name = "fromPLC"
*.RoboS1.app[1].io.localPort = 1013
*.RoboS2.app[1].io.localPort = 1021
*.RoboS*.app[0].source.initialProductionOffset = 2.00s


*.PLC.numApps = 13
*.PLC.hasOutgoingStreams = true
*.PLC.hasIncomingStreams = true
*.PLC.app[0].typename = "UdpSinkApp"
*.PLC.app[1].typename = "UdpSinkApp"
*.PLC.app[2].typename = "UdpSinkApp"
*.PLC.app[3].typename = "UdpSinkApp"
*.PLC.app[4].typename = "UdpSinkApp"
*.PLC.app[5].typename = "UdpSourceApp"
*.PLC.app[6].typename = "UdpSourceApp"
*.PLC.app[7].typename = "UdpSourceApp"
*.PLC.app[8].typename = "UdpSinkApp"
*.PLC.app[9].typename = "UdpSinkApp"
*.PLC.app[10].typename = "UdpSinkApp"
*.PLC.app[11].typename = "UdpSourceApp"
*.PLC.app[12].typename = "UdpSourceApp"
*.PLC.app[0].display-name = "fromSensorS1"
*.PLC.app[0].io.localPort = 1011
*.PLC.app[1].display-name = "fromCameraS1"
*.PLC.app[1].io.localPort = 1012
*.PLC.app[2].display-name = "fromRoboS1"
*.PLC.app[2].io.localPort = 1014
*.PLC.app[3].display-name = "fromRoboS2"
*.PLC.app[3].io.localPort = 1022
*.PLC.app[4].display-name = "fromSensorS3"
*.PLC.app[4].io.localPort = 1031
*.PLC.app[5].display-name = "ToRoboS1"
*.PLC.app[5].io.destAddress = "RoboS1"
*.PLC.app[5].io.destPort = 1013
*.PLC.app[5].source.packetLength = 200B
*.PLC.app[5].source.productionInterval = 5ms
*.PLC.app[6].display-name = "ToRoboS2"
*.PLC.app[6].io.destAddress = "RoboS2"
*.PLC.app[6].io.destPort = 1021
*.PLC.app[6].source.packetLength = 200B
*.PLC.app[6].source.productionInterval = 5ms
*.PLC.app[7].display-name = "ToEsteiraS3"
*.PLC.app[7].io.destAddress = "EsteiraS3"
*.PLC.app[7].io.destPort = 1093
*.PLC.app[7].source.packetLength = 50B
*.PLC.app[7].source.productionInterval = 5ms
*.PLC.app[5].source.initialProductionOffset = 2.0s
*.PLC.app[6].source.initialProductionOffset = 2.0s
*.PLC.app[7].source.initialProductionOffset = 2.0s
*.PLC.app[8].display-name = "fromEsteiraS1"
*.PLC.app[8].io.localPort = 1081
*.PLC.app[9].display-name = "fromEsteiraS2"
*.PLC.app[9].io.localPort = 1082
*.PLC.app[10].display-name = "fromEsteiraS3"
*.PLC.app[10].io.localPort = 1083
*.PLC.app[11].display-name = "ToEsteiraS1"
*.PLC.app[11].io.destAddress = "EsteiraS1"
*.PLC.app[11].io.destPort = 1091
*.PLC.app[11].source.packetLength = 50B
*.PLC.app[11].source.productionInterval = 5ms
*.PLC.app[12].display-name = "ToEsteiraS2"
*.PLC.app[12].io.destAddress = "EsteiraS2"
*.PLC.app[12].io.destPort = 1092
*.PLC.app[12].source.packetLength = 50B
*.PLC.app[12].source.productionInterval = 5ms
*.PLC.app[11].source.initialProductionOffset = 2.0s
*.PLC.app[12].source.initialProductionOffset = 2.0s


*.EsteiraS*.numApps = 2
*.EsteiraS*.hasIncomingStreams = true
*.EsteiraS*.app[0].typename = "UdpSinkApp"
*.EsteiraS*.app[1].typename = "UdpSourceApp"
*.EsteiraS*.app[0].typename = "UdpSinkApp"
*.EsteiraS*.app[0].display-name = "fromPLC"
*.EsteiraS1.app[0].io.localPort = 1091
*.EsteiraS2.app[0].io.localPort = 1092
*.EsteiraS3.app[0].io.localPort = 1093
*.EsteiraS*.app[1].display-name = "toPLC"
*.EsteiraS*.app[1].io.destAddress = "PLC"
*.EsteiraS1.app[1].io.destPort = 1081
*.EsteiraS2.app[1].io.destPort = 1082
*.EsteiraS3.app[1].io.destPort = 1083
*.EsteiraS*.app[1].source.packetLength = 50B
*.EsteiraS*.app[1].source.productionInterval = 5ms
*.EsteiraS*.app[1].source.initialProductionOffset = 2.0s

[Apps]
extends = DL2,Apps0


[QFI]
extends = Apps0

*.FGS.*.delayQFI = {3: rngProvider("histogramContainer","s26"),
						4: rngProvider("histogramContainer","s20"),
						66: rngProvider("histogramContainer","s4"),
						80: rngProvider("histogramContainer","s6"),
						83: rngProvider("histogramContainer","s25"), # considerando 83
						86: rngProvider("histogramContainer","s19"), # considerando 89
						87: rngProvider("histogramContainer","gPTP")}



*.*.hasOutgoingStreams = true
*.*.hasEgressTrafficShaping = true
#*.*.bridging.streamIdentifier.identifier.mapping = [{stream: "sync", packetFilter: expr(has(gptp))},{stream: "Nsync", packetFilter: expr(!has(gptp))}]
*.PLC.bridging.streamIdentifier.identifier.mapping = [{stream: "pcp5", packetFilter: expr(!has(gptp) && udp.destPort > 1090)},{stream: "pcp6", packetFilter: expr(!has(gptp) && udp.destPort < 1090)}]
*.PLC.bridging.streamCoder.encoder.mapping = [{stream: "pcp5", pcp: 5},{stream: "pcp", pcp: 6}]

*.Sensor*.bridging.streamIdentifier.identifier.mapping = [{stream: "pcp1", packetFilter: expr(!has(gptp) && udp.destPort < 1090)}]
*.Sensor*.bridging.streamCoder.encoder.mapping = [{stream: "pcp1", pcp: 1}]

*.Camera*.bridging.streamIdentifier.identifier.mapping = [{stream: "pcp3", packetFilter: expr(!has(gptp) && udp.destPort < 1090)}]
*.Camera*.bridging.streamCoder.encoder.mapping = [{stream: "pcp3", pcp: 3}]

*.Esteira*.bridging.streamIdentifier.identifier.mapping = [{stream: "pcp0", packetFilter: expr(!has(gptp) && udp.destPort < 1090)}]
*.Esteira*.bridging.streamCoder.encoder.mapping = [{stream: "pcp0", pcp: 0}]

*.Robo*.bridging.streamIdentifier.identifier.mapping = [{stream: "pcp4", packetFilter: expr(!has(gptp) && udp.destPort < 1090)}]
*.Robo*.bridging.streamCoder.encoder.mapping = [{stream: "pcp4", pcp: 4}]

[QFITime]
extends=DL2,QFI
[QFITimeAux]
extends=DL3,QFI
