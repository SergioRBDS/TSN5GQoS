[General]
network = TestGptpQoS
sim-time-limit = 500s
#**.TSNAppsTableFile = xmldoc("config/app.xml")
*.histogramContainer.histograms = {Uplink: "../../../deterministic6g_data/PD-Wireless-5G-1/s1-UL_wall.xml", Downlink: "../../../deterministic6g_data/PD-Wireless-5G-1/s10-DL_wall.xml", D2D: "../../../deterministic6g_data/PD-Wireless-5G-1/testeD2D.xml"}
*.FGS.fieGSystem.delayUplink = rngProvider("histogramContainer","Uplink")
*.FGS.fiveGSystem.delayDownlink = rngProvider("histogramContainer","Downlink")
*.FGS.d*.delayUplink = rngProvider("histogramContainer","Uplink")
*.FGS.n*.delayDownlink = rngProvider("histogramContainer","Downlink")
*.FGS.d*.delayD2D = rngProvider("histogramContainer","D2D")

#*.FGS.d*.bridging.delayLayer.egress.delayQfi = {1:rngProvider("histogramContainer","D2D"),2:rngProvider("histogramContainer","D2D")}
#*.**.tt[*].**.delayQfi = {0:rngProvider("histogramContainer","D2D"),1:rngProvider("histogramContainer","D2D"),2:rngProvider("histogramContainer","D2D"),3:rngProvider("histogramContainer","D2D")}
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer[*].displayInfos = true

*.FGS.**.clock.typename = "IdealClock"
**.clock.typename = "SettableClock"

**.referenceClock = "PLC.clock"

*.*.app[*].source.clockModule = "^.^.clock"
# data link visualizer displays gPTP time synchronization packets
*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"

*.visualizer.numInfoVisualizers = 2
*.visualizer.infoVisualizer[0].modules = "*.PLC.clock"
*.visualizer.infoVisualizer[1].modules = "*.*.clock"
*.visualizer.infoVisualizer[1].placementHint = "top"
*.PLC.clock.displayStringTextFormat = "time: %T"
*.**.clock.displayStringTextFormat = "diff: %d"
[Apps]

*.Sensor*.numApps = 1
*.Sensor*.hasOutgoingStreams = true
*.Sensor*.app[0].typename = "UdpSourceApp"
*.SensorS1.app[0].display-name = "NovaPeca"
*.SensorS3.app[0].display-name = "PecasNaCaixa"
*.Sensor*.app[0].io.destAddress = "PLC"
*.SensorS1.app[0].io.destPort = 1011
*.SensorS3.app[0].io.destPort = 1031
*.SensorS*.app[0].source.packetLength = 64B
*.SensorS*.app[0].source.productionInterval = 20ms
*.SensorS*.app[0].source.initialProductionOffset = 2s

*.CameraS1.numApps = 1
*.CameraS1.hasOutgoingStreams = true
*.CameraS1.app[0].io.destAddress = "PLC"
*.CameraS1.app[0].typename = "UdpSourceApp"
*.CameraS1.app[0].display-name = "StatusPeca"
*.CameraS1.app[0].io.destPort = 1012
*.CameraS1.app[0].source.packetLength = 1400B
*.CameraS1.app[0].source.productionInterval = 500ms
*.CameraS1.app[0].source.initialProductionOffset = 2.1s

*.RoboS*.numApps = 2
*.RoboS*.hasOutgoingStreams = true
*.RoboS*.hasIncomingStreams = true
*.RoboS*.app[0].io.destAddress = "PLC"
*.RoboS*.app[0].typename = "UdpSourceApp"
*.RoboS1.app[0].display-name = "S2OuDesc"
*.RoboS2.app[0].display-name = "S3"
*.RoboS1.app[0].io.destPort = 1014
*.RoboS2.app[0].io.destPort = 1022
*.RoboS*.app[0].source.packetLength = 128B
*.RoboS*.app[0].source.productionInterval = 20ms
*.RoboS*.app[1].typename = "UdpSinkApp"
*.RoboS*.app[1].display-name = "fromPLC"
*.RoboS1.app[1].io.localPort = 1013
*.RoboS2.app[1].io.localPort = 1021
*.RoboS*.app[0].source.initialProductionOffset = 2.01s


*.PLC.numApps = 8
*.PLC.hasOutgoingStreams = true
*.PLC.hasIncomingStreams = true
*.PLC.app[0].typename = "UdpSinkApp"
*.PLC.app[1].typename = "UdpSinkApp"
*.PLC.app[2].typename = "UdpSinkApp"
*.PLC.app[3].typename = "UdpSinkApp"
*.PLC.app[4].typename = "UdpSinkApp"
*.PLC.app[5].typename = "UdpSourceApp"
*.PLC.app[6].typename = "UdpSourceApp"
*.PLC.app[7].typename = "UdpSourceApp"
*.PLC.app[0].display-name = "fromSensorS1"
*.PLC.app[0].io.localPort = 1011
*.PLC.app[1].display-name = "fromCameraS1"
*.PLC.app[1].io.localPort = 1012
*.PLC.app[2].display-name = "fromRoboS1"
*.PLC.app[2].io.localPort = 1014
*.PLC.app[3].display-name = "fromRoboS2"
*.PLC.app[3].io.localPort = 1022
*.PLC.app[4].display-name = "fromSensorS3"
*.PLC.app[4].io.localPort = 1031
*.PLC.app[5].display-name = "ToRoboS1"
*.PLC.app[5].io.destAddress = "RoboS1"
*.PLC.app[5].io.destPort = 1013
*.PLC.app[5].source.packetLength = 512B
*.PLC.app[5].source.productionInterval = 200ms
*.PLC.app[6].display-name = "ToRoboS2"
*.PLC.app[6].io.destAddress = "RoboS2"
*.PLC.app[6].io.destPort = 1021
*.PLC.app[6].source.packetLength = 512B
*.PLC.app[6].source.productionInterval = 200ms
*.PLC.app[7].display-name = "ToEsteiraS3"
*.PLC.app[7].io.destAddress = "EsteiraS3"
*.PLC.app[7].io.destPort = 1041
*.PLC.app[7].source.packetLength = 128B
*.PLC.app[7].source.productionInterval = 200ms
*.PLC.app[5].source.initialProductionOffset = 2.06s
*.PLC.app[6].source.initialProductionOffset = 2.07s
*.PLC.app[7].source.initialProductionOffset = 2.08s


*.EsteiraS3.numApps = 1
*.EsteiraS3.hasIncomingStreams = true
*.EsteiraS3.app[0].typename = "UdpSinkApp"
*.EsteiraS3.app[0].display-name = "fromPLC"
*.EsteiraS3.app[0].io.localPort = 1041
[AppsAux]
extends = Apps


**.clock.oscillator.typename = "ConstantDriftOscillator"

#*.TsnSwitchDataNetwork.clock.oscillator.driftRate = 0ppm
**.oscillator.driftRate = uniform(-100ppm,100ppm)


[PCP]
*.PLC.bridging.streamIdentifier.identifier.mapping = [{stream: "toRS1", packetFilter: expr(udp.destPort == 1013)},{stream: "toRS2", packetFilter: expr(udp.destPort == 1021)},{stream: "toES3", packetFilter: expr(udp.destPort == 1032)}]
*.PLC.bridging.streamCoder.encoder.mapping = [{stream: "toRS1", pcp: 5},{stream: "toRS2", pcp: 4},{stream: "toES3", pcp: 4}]

*.SensorS1.bridging.streamIdentifier.identifier.mapping = [{stream: "SS1", packetFilter: expr(udp.destPort == 1011)}]
*.SensorS1.bridging.streamCoder.encoder.mapping = [{stream: "SS1", pcp: 2}]
*.CameraS1.bridging.streamIdentifier.identifier.mapping = [{stream: "CS1", packetFilter: expr(udp.destPort == 1012)}]
*.CameraS1.bridging.streamCoder.encoder.mapping = [{stream: "CS1", pcp: 4}]
*.RoboS1.bridging.streamIdentifier.identifier.mapping = [{stream: "RS1", packetFilter: expr(udp.destPort == 1014)}]
*.RoboS1.bridging.streamCoder.encoder.mapping = [{stream: "RS1", pcp: 2}]

*.RoboS2.bridging.streamIdentifier.identifier.mapping = [{stream: "RS2", packetFilter: expr(udp.destPort == 1022)}]
*.RoboS2.bridging.streamCoder.encoder.mapping = [{stream: "RS2", pcp: 2}]

*.SensorS3.bridging.streamIdentifier.identifier.mapping = [{stream: "SS3", packetFilter: expr(udp.destPort == 1031)}]
*.SensorS3.bridging.streamCoder.encoder.mapping = [{stream: "SS3", pcp: 2}]


[Sync]
*.**.hasTimeSynchronization = true

*.PLC.gptp.gptpNodeType = "MASTER_NODE"
*.PLC.gptp.masterPorts = ["eth0"]
*.PLC.gptp.slavePort = ""

*.SwitchS1.gptp.masterPorts = ["eth1","eth2","eth3","eth4",]
*.SwitchS1.gptp.slavePort = "eth0"

*.SwitchS2.gptp.masterPorts = ["eth1","eth2",]
*.SwitchS2.gptp.slavePort = "eth0"

*.SwitchS3.gptp.masterPorts = ["eth1","eth2"]
*.SwitchS3.gptp.slavePort = "eth0"

*.SwitchDN.gptp.masterPorts = ["eth0"]
*.SwitchDN.gptp.slavePort = "eth1"


# Bridge 5G
*.FGS.nwtt[*].gptp.domain[*].slavePort = "eth0"
*.FGS.nwtt[*].gptp.domain[*].masterPorts = ["tt0","tt1","tt2"]
*.FGS.dstt[*].gptp.domain[*].slavePort = "tt0"
*.FGS.dstt[*].gptp.domain[*].masterPorts = ["eth0"]




[AppsSync]
extends= AppsAux, Sync