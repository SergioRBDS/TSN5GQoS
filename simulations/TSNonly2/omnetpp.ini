[General]
network = TestGptpQoS2
sim-time-limit = 100s
**.TSNAppsTableFile = xmldoc("config/app.xml")
#
#	5G Delay
#

*.histogramContainer.histograms = {Uplink: "../../../deterministic6g_data/PD-Wireless-5G-1/s1-UL_wall.xml", Downlink: "../../../deterministic6g_data/PD-Wireless-5G-1/s10-DL_wall.xml", D2D: "../../../deterministic6g_data/PD-Wireless-5G-1/testeD2D.xml"}
#*.FGS.fieGSystem.delayUplink = rngProvider("histogramContainer","Uplink")
#*.FGS.fiveGSystem.delayDownlink = rngProvider("histogramContainer","Downlink")
#*.FGS.d*.delayUplink = rngProvider("histogramContainer","Uplink")
#*.FGS.n*.delayDownlink = rngProvider("histogramContainer","Downlink")
#*.FGS.d*.delayD2D = rngProvider("histogramContainer","D2D")
#*.FGS.dstt[*].tt[1].delayLayer.delay = rngProvider("histogramContainer","D2D")

#*.**.tt[*].**.delayQfi = {1:rngProvider("histogramContainer","D2D"),3:rngProvider("histogramContainer","D2D"),4:rngProvider("histogramContainer","D2D"),65:rngProvider("histogramContainer","D2D"),67:rngProvider("histogramContainer","D2D"),72:rngProvider("histogramContainer","D2D"),86:rngProvider("histogramContainer","D2D"),88:rngProvider("histogramContainer","D2D")}


#
#	Visualizer
#

*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer[*].displayInfos = true


[DL]

#
#	Time Synchronization
#
*.**.hasTimeSynchronization = true

*.switch5GC.gptp.gptpNodeType = "MASTER_NODE"
*.switch5GC.gptp.masterPorts = ["eth0"]
*.switch5GC.gptp.slavePort = ""

*.switchCell1.gptp.slavePort = "eth0"
*.switchCell1.gptp.masterPorts = []

*.switchCell2.gptp.slavePort = "eth0"
*.switchCell2.gptp.masterPorts = []

# Bridge 5G
*.FGS.nwtt[*].gptp.domain[*].slavePort = "eth0"
*.FGS.nwtt[*].gptp.domain[*].masterPorts = ["tt0","tt1"]
*.FGS.dstt[*].gptp.domain[*].slavePort = "tt0"
*.FGS.dstt[*].gptp.domain[*].masterPorts = ["eth0"]

**.referenceClock = "switch5GC.clock"

# data link visualizer displays gPTP time synchronization packets
*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"

*.visualizer.numInfoVisualizers = 3
*.visualizer.infoVisualizer[0].modules = "*.switch5GC.clock"
*.visualizer.infoVisualizer[1].modules = "*.switchCell1.clock"
*.visualizer.infoVisualizer[1].placementHint = "topLeft"
*.visualizer.infoVisualizer[2].modules = "*.switchCell2*.clock"
*.visualizer.infoVisualizer[2].placementHint = "topRight"
*.switch5GC.clock.displayStringTextFormat = "time: %T"
*.switchCell1.clock.displayStringTextFormat = "diff: %d"
*.switchCell2.clock.displayStringTextFormat = "diff: %d"


*.FGS.**.clock.typename = "IdealClock"
**.clock.oscillator.typename = "ConstantDriftOscillator"

#*.TsnSwitchDataNetwork.clock.oscillator.driftRate = 0ppm
#**.oscillator.driftRate = uniform(10ppm,100ppm)

*.switch5GC.clock.oscillator.driftRate = 5ppm
**.oscillator.driftRate = 100ppm

[UL]
#
#	Time Synchronization
#
*.**.hasTimeSynchronization = true

*.switchCell2.gptp.gptpNodeType = "MASTER_NODE"
*.switchCell2.gptp.masterPorts = ["eth0"]
*.switchCell2.gptp.slavePort = ""

*.switch5GC.gptp.slavePort = "eth0"
*.switch5GC.gptp.masterPorts = []

*.switchCell1.gptp.slavePort = "eth0"
*.switchCell1.gptp.masterPorts = []

# Bridge 5G
*.FGS.nwtt[*].gptp.domain[*].masterPorts = ["eth0"]
*.FGS.nwtt[*].gptp.domain[*].slavePort = "tt1"
*.FGS.dstt[0].gptp.domain[*].masterPorts = ["eth0"]
*.FGS.dstt[0].gptp.domain[*].slavePort = "tt1"
*.FGS.dstt[1].gptp.domain[*].masterPorts = ["tt0","tt1"]
*.FGS.dstt[1].gptp.domain[*].slavePort = "eth0"



**.referenceClock = "switchCell2.clock"

# data link visualizer displays gPTP time synchronization packets
*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"

*.visualizer.numInfoVisualizers = 3
*.visualizer.infoVisualizer[0].modules = "*.switch5GC.clock"
*.visualizer.infoVisualizer[1].modules = "*.switchCell1.clock"
*.visualizer.infoVisualizer[1].placementHint = "topLeft"
*.visualizer.infoVisualizer[2].modules = "*.switchCell2*.clock"
*.visualizer.infoVisualizer[2].placementHint = "topRight"
*.switchCell2.clock.displayStringTextFormat = "time: %T"
*.switch5GC.clock.displayStringTextFormat = "diff: %d"
*.switchCell1.clock.displayStringTextFormat = "diff: %d"


*.FGS.**.clock.typename = "IdealClock"
**.clock.oscillator.typename = "ConstantDriftOscillator"

#*.TsnSwitchDataNetwork.clock.oscillator.driftRate = 0ppm
#**.oscillator.driftRate = uniform(10ppm,100ppm)

*.switchCell2.clock.oscillator.driftRate = 10ppm
**.oscillator.driftRate = 100ppm



[Apps]

*.switch5GC.numApps = 2
*.switch5GC.hasOutgoingStreams = true
*.switch5GC.hasIncomingStreams = true
*.switch5GC.app[0].typename = "UdpSourceApp"
*.switch5GC.app[0].io.destAddress = "switchCell1"
*.switch5GC.app[0].io.destPort = 2000
*.switch5GC.app[0].source.packetLength = 128B
*.switch5GC.app[0].source.productionInterval = 50ms
*.switch5GC.app[0].source.initialProductionOffset = 0ms
*.switch5GC.app[1].typename = "UdpSinkApp"
*.switch5GC.app[1].io.localPort = 2001

*.switchCell1.numApps = 2
*.switchCell1.hasOutgoingStreams = true
*.switchCell1.hasIncomingStreams = true
*.switchCell1.app[0].typename = "UdpSourceApp"
*.switchCell1.app[0].io.destAddress = "switch5GC"
*.switchCell1.app[0].io.destPort = 2001
*.switchCell1.app[0].source.packetLength = 128B
*.switchCell1.app[0].source.productionInterval = 10ms
*.switchCell1.app[0].source.initialProductionOffset = 0ms
*.switchCell1.app[1].typename = "UdpSinkApp"
*.switchCell1.app[1].io.localPort = 2000


*.switchCell2.numApps = 2
*.switchCell2.hasOutgoingStreams = true
*.switchCell2.hasIncomingStreams = true
*.switchCell2.app[0].typename = "UdpSourceApp"
*.switchCell2.app[0].io.destAddress = "switch5GC"
*.switchCell2.app[0].io.destPort = 2001
*.switchCell2.app[0].source.packetLength = 128B
*.switchCell2.app[0].source.productionInterval = 1000s
*.switchCell2.app[0].source.initialProductionOffset = 1000s
*.switchCell2.app[1].typename = "UdpSinkApp"
*.switchCell2.app[1].io.localPort = 2000

*.switch5GC.bridging.streamIdentifier.identifier.mapping = [{stream: "PLC10", packetFilter: expr(has(udp))}]
*.switch5GC.bridging.streamCoder.encoder.mapping = [{stream: "PLC10", pcp: 1}]
*.switchCell1.bridging.streamIdentifier.identifier.mapping = [{stream: "Sensor10", packetFilter: expr(has(udp))}]
*.switchCell1.bridging.streamCoder.encoder.mapping = [{stream: "Sensor10", pcp: 1}]

[AppsDL]
extends=DL, Apps

#**.displayGateSchedules = true
#**.gateFilter = "**.eth[*].**"
#**.gateScheduleVisualizer.height = 16
#**.gateScheduleVisualizer.placementHint = "top"

# Enable egress traffic shaping
*.switch5GC.hasEgressTrafficShaping = true
*.switchCell1.hasEgressTrafficShaping = true
*.FGS.**.hasEgressTrafficShaping = true

# Time-aware traffic shaping for switch5GC
#*.switch5GC.eth[*].macLayer.queue.numTrafficClasses = 2
#*.switch5GC.eth[*].macLayer.queue.*[0].display-name = "best effort"
#*.switch5GC.eth[*].macLayer.queue.*[1].display-name = "video"
#*.switch5GC.eth[*].macLayer.queue.transmissionGate[0].offset = 124ms
#*.switch5GC.eth[*].macLayer.queue.transmissionGate[0].durations = [124ms, 1ms] # period is 10
#*.switch5GC.eth[*].macLayer.queue.transmissionGate[1].offset = 0ms
#*.switch5GC.eth[*].macLayer.queue.transmissionGate[1].durations = []

# Time-aware traffic shaping for switchCell1
#*.switchCell1.eth[*].macLayer.queue.numTrafficClasses = 2
#*.switchCell1.eth[*].macLayer.queue.*[0].display-name = "best effort"
#*.switchCell1.eth[*].macLayer.queue.*[1].display-name = "video"
#*.switchCell1.eth[*].macLayer.queue.transmissionGate[0].offset = 124ms
#*.switchCell1.eth[*].macLayer.queue.transmissionGate[0].durations = [124ms, 1ms] # period is 10
#*.switchCell1.eth[*].macLayer.queue.transmissionGate[1].offset = 0ms
#*.switchCell1.eth[*].macLayer.queue.transmissionGate[1].durations = []

# TSN switches have time-aware shapers with two traffic classes
#*.switch*.hasEgressTrafficShaping = true
#*.switch*.eth[*].macLayer.queue.numTrafficClasses = 2
#*.switch*.eth[*].macLayer.queue.classifier.typename = "ContentBasedClassifier"
#*.switch*.eth[*].macLayer.queue.queue[*].typename = "DropTailQueue"
#*.switch*.eth[*].macLayer.queue.classifier.packetFilters = ["app*", "Gptp*"]
#*.switch*.eth[*].macLayer.queue.transmissionGate[0].offset = 124ms
#*.switch*.eth[*].macLayer.queue.transmissionGate[0].durations = [124ms, 1ms]
#*.switch*.eth[*].macLayer.queue.transmissionGate[0].clockModule = "^.^.^.^.clock"
#*.switch*.eth[*].macLayer.queue.transmissionGate[1].initiallyOpen = true
#*.switch*.eth[*].macLayer.queue.transmissionGate[1].durations = []		# gate always open
#*.switch*.eth[*].macLayer.queue.transmissionGate[1].clockModule = "^.^.^.^.clock"

# Time-aware traffic shaping for switchCell1
#*.FGS.**.eth[*].macLayer.queue.numTrafficClasses = 2
#*.FGS.**.eth[*].macLayer.queue.*[0].display-name = "best effort"
#*.FGS.**.eth[*].macLayer.queue.*[1].display-name = "video"
#*.FGS.**.eth[*].macLayer.queue.transmissionGate[0].offset = 124ms
#*.FGS.**.eth[*].macLayer.queue.transmissionGate[0].durations = [124ms, 1ms] # period is 10
#*.FGS.**.eth[*].macLayer.queue.transmissionGate[1].offset = 0ms
#*.FGS.**.eth[*].macLayer.queue.transmissionGate[1].durations = [1ms, 124ms]

[AppsUL]
extends=UL, Apps

#*.s*.**.displayGateSchedules = true
#**.gateFilter = "**.eth[*].**"
#**.gateScheduleVisualizer.height = 16
#**.gateScheduleVisualizer.placementHint = "top"
# Enable egress traffic shaping
#*.switch5GC.hasEgressTrafficShaping = true
#*.switchCell1.hasEgressTrafficShaping = true
#*.FGS.**.hasEgressTrafficShaping = true


#**.defaultGateIndex = 7

#*.**.eth[*].macLayer.queue.transmissionGate[7].offset = 0ms
#*.**.eth[*].macLayer.queue.transmissionGate[7].durations = [2ms, 123ms]
#*.**.eth[*].macLayer.queue.transmissionGate[1].offset = 123ms
#*.**.eth[*].macLayer.queue.transmissionGate[1].durations = [123ms, 2ms]

