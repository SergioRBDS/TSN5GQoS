//
// Generated file, do not edit! Created by opp_msgtool 6.0 from src/linklayer/common/QfiTag.msg.
//

#ifndef __INET_QFITAG_M_H
#define __INET_QFITAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {

class QfiTagBase;
class QfiReq;
class QfiInd;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace inet {

/**
 * Class generated from <tt>src/linklayer/common/QfiTag.msg:16</tt> by opp_msgtool.
 * <pre>
 * //
 * // This is an abstract base class that should not be directly added as a tag.
 * //
 * class QfiTagBase extends TagBase
 * {
 *     int qfi = -1;
 * }
 * </pre>
 */
class QfiTagBase : public ::inet::TagBase
{
  protected:
    int qfi = -1;

  private:
    void copy(const QfiTagBase& other);

  protected:
    bool operator==(const QfiTagBase&) = delete;

  public:
    QfiTagBase();
    QfiTagBase(const QfiTagBase& other);
    virtual ~QfiTagBase();
    QfiTagBase& operator=(const QfiTagBase& other);
    virtual QfiTagBase *dup() const override {return new QfiTagBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getQfi() const;
    virtual void setQfi(int qfi);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QfiTagBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QfiTagBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/linklayer/common/QfiTag.msg:25</tt> by opp_msgtool.
 * <pre>
 * //
 * // This request determines the PCP that should be used to send the packet.
 * // It may be present on a packet from the application to the mac protocol.
 * //
 * class QfiReq extends QfiTagBase
 * {
 * }
 * </pre>
 */
class QfiReq : public ::inet::QfiTagBase
{
  protected:

  private:
    void copy(const QfiReq& other);

  protected:
    bool operator==(const QfiReq&) = delete;

  public:
    QfiReq();
    QfiReq(const QfiReq& other);
    virtual ~QfiReq();
    QfiReq& operator=(const QfiReq& other);
    virtual QfiReq *dup() const override {return new QfiReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QfiReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QfiReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/linklayer/common/QfiTag.msg:33</tt> by opp_msgtool.
 * <pre>
 * //
 * // This indication specifies the PCP that was used to receive the packet.
 * // It may be present on a packet from the mac protocol to the application.
 * //
 * class QfiInd extends QfiTagBase
 * {
 * }
 * </pre>
 */
class QfiInd : public ::inet::QfiTagBase
{
  protected:

  private:
    void copy(const QfiInd& other);

  protected:
    bool operator==(const QfiInd&) = delete;

  public:
    QfiInd();
    QfiInd(const QfiInd& other);
    virtual ~QfiInd();
    QfiInd& operator=(const QfiInd& other);
    virtual QfiInd *dup() const override {return new QfiInd(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QfiInd& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QfiInd& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::QfiTagBase *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::QfiTagBase*>(ptr.get<cObject>()); }
template<> inline inet::QfiReq *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::QfiReq*>(ptr.get<cObject>()); }
template<> inline inet::QfiInd *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::QfiInd*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_QFITAG_M_H

